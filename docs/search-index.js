crystal_doc_search_index_callback({"repository_name":"result","body":"# Result\n\n[![Build Status](https://travis-ci.com/Nicolab/crystal-result.svg?branch=master)](https://travis-ci.com/Nicolab/crystal-result) [![GitHub release](https://img.shields.io/github/release/Nicolab/crystal-result.svg)](https://github.com/Nicolab/crystal-result/releases) [![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://nicolab.github.io/crystal-result/)\n\n∠(・.-)―〉 →◎ `Result` adds _Monadic Error Handling_ capabilities to [Crystal lang](https://crystal-lang.org), inspired by `Result` in _Rust_ lang and Monad.\n\nAdapted to be productive in Crystal and [Domain-Driven Design (DDD)](https://en.wikipedia.org/wiki/Domain-driven_design).\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\n   dependencies:\n     result:\n       github: nicolab/result\n       version: ~> 1.1.0 # Check the latest version!\n```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"result\"\n\n# With a basic *value*\ndef something(value : Number) : Result\n  # Wrap value into a `Result` instance (struct: `Ok` or `Err`).\n  # If an error occurred, here *something* method returns an `Err` instance.\n  res = result!(value)\n\n  # Executed only if `result!` (above) has returned an `Ok` instance,\n  pp \"does something\"\n  pp res.unwrap # => Number\n\n  res\nend\n\n# With a `Result` instance\ndef something(res : Result) : Result\n  # Try to unwrap original value.\n  # If result is an error, here *something* method returns this `Err` instance.\n  data = try!(res)\n\n  # Executed if `try!` (above) has returned the original value.\n  pp \"does something\"\n\n  # Original value\n  pp data\n\n  # Wrap data into a `Result` struct:\n\n  # Returns success\n  # `Ok` / `OkType::Done`\n  Ok.done data\n\n  # Or returns an error\n  # `Err` / `ErrType::Fail`\n  Err.fail \"Oops!\"\nend\n\n# Try to unwrap a *Result* (like `Result#unwrap`) or forward the value if it is not a `Result`.\nres = Ok.done(\"hello\")\nvalue = unwrap!(res) # => \"hello\"\n\nres = Err.fail(\"Oops\")\nvalue = unwrap!(res) # => raise Exception.new \"Oops\"\n\nfoo = \"bar\"\nvalue2 = unwrap!(foo) # => \"bar\"\n```\n\nTo go further, `Result` works wonderfully with [fuzzineer/match-crystal](https://github.com/scatterfish/match-crystal).\n\n```crystal\nrequire \"result\"\nrequire \"match-crystal\"\n\nres = something()\n\nmessage = match res, {\n  Ok::Created   => \"Created with success\",\n  Ok::Destroyed => \"Destroyed with success\",\n  Ok::Pending   => \"Pending task\",\n  Ok            => \"Ok is good\",\n  Err::Input    => \"Bad argument\",\n  Err           => ->{\n    puts \"Block is supported using Proc syntax\"\n    \"Error occurred\"\n  },\n  _             => \"anything else!\"\n}\n\nputs message\n```\n\n## Development\n\n```sh\ncrystal spec\ncrystal tool format\n```\n\n## Contributing\n\n1. Fork it (https://github.com/Nicolab/result/fork)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## LICENSE\n\n[MIT](https://github.com/Nicolab/crystal-result/blob/master/LICENSE) (c) 2020, Nicolas Talle.\n\n## Author\n\n| [![Nicolas Tallefourtane - Nicolab.net](https://www.gravatar.com/avatar/d7dd0f4769f3aa48a3ecb308f0b457fc?s=64)](https://github.com/sponsors/Nicolab) |\n|---|\n| [Nicolas Talle](https://github.com/sponsors/Nicolab) |\n| [![Make a donation via Paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=PGRH4ZXP36GUC) |\n","program":{"html_id":"result/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"result!(value,ok=Ok::Done,err=Err::Fail)-macro","html_id":"result!(value,ok=Ok::Done,err=Err::Fail)-macro","name":"result!","doc":"Takes a *value* and make a `Result`.\n\n* `Ok` (*ok*) instance if *value* does not raise an `Exception`.\n* or force the caller to return `Err` (*err*) if an `Exception` occurred\n  (in this case, the rest of the code isn't executed).\n\n```\n# With a basic *value*\ndef something(value : Number) : Result\n  # Wrap value into a `Result` instance (struct: `Ok` or `Err`).\n  # If an error occurred, here *something* method returns an `Err` instance.\n  res = result!(value)\n\n  # Executed only if `result!` (above) has returned an `Ok` instance,\n  pp \"does something\"\n  pp res.unwrap # => Number\n\n  res\nend\n```","summary":"<p>Takes a <em>value</em> and make a <code><a href=\"Result.html\">Result</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"ok","doc":null,"default_value":"Ok::Done","external_name":"ok","restriction":""},{"name":"err","doc":null,"default_value":"Err::Fail","external_name":"err","restriction":""}],"args_string":"(value, ok = <span class=\"t\">Ok</span><span class=\"t\">::</span><span class=\"t\">Done</span>, err = <span class=\"t\">Err</span><span class=\"t\">::</span><span class=\"t\">Fail</span>)","source_link":null,"def":{"name":"result!","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"ok","doc":null,"default_value":"Ok::Done","external_name":"ok","restriction":""},{"name":"err","doc":null,"default_value":"Err::Fail","external_name":"err","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  raise ArgumentError.new \"#result! - wrong argument ('ok' or 'err')\" unless \n{{ ok }}\n.ok? && \n{{ err }}\n.err?\n\n  begin\n    \n{{ ok }}\n.new \n{{ value }}\n\n  rescue \nexception\n    return \n{{ err }}\n.new \nexception\n  \nend\n\n"}},{"id":"try!(result)-macro","html_id":"try!(result)-macro","name":"try!","doc":"Get the `Result` value (unwrapped) or force the caller to return `Err`\n(if `Err`, the rest of the code isn't executed).\n\n```\n# With a `Result` instance\ndef something(res : Result) : Result\n  # Try to unwrap original value.\n  # If result is an error, here *something* method returns this `Err` instance.\n  data = try!(res)\n\n  # Executed if `try!` (above) has returned the original value.\n  pp \"does something\"\n\n  # Original value\n  pp data\n\n  # Wrap data into a `Result` struct:\n\n  # Returns success\n  # `Ok` / `OkType::Done`\n  Ok.done data\n\n  # Or returns an error\n  # `Err` / `ErrType::Fail`\n  Err.fail \"Oops!\"\nend\n```","summary":"<p>Get the <code><a href=\"Result.html\">Result</a></code> value (unwrapped) or force the caller to return <code><a href=\"Err.html\">Err</a></code> (if <code><a href=\"Err.html\">Err</a></code>, the rest of the code isn't executed).</p>","abstract":false,"args":[{"name":"result","doc":null,"default_value":"","external_name":"result","restriction":""}],"args_string":"(result)","source_link":null,"def":{"name":"try!","args":[{"name":"result","doc":null,"default_value":"","external_name":"result","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  \n%res\n = \n{{ result }}\n\n\n  if \n%res\n.ok?\n    \n%res\n.unwrap\n  \nelse\n    \n# returns error\n\n    return \n%res\n\n  \nend\n\n"}},{"id":"unwrap!(value)-macro","html_id":"unwrap!(value)-macro","name":"unwrap!","doc":"Try to unwrap *value* (like `Result#unwrap`).\nIf value is not a `Result` (`Ok` or `Err`), *value* is simply forwarded.\n> NOTE: To proceed, this macro checks if *value* `responds_to` `unwrap` method.\n\n```\nres = Ok.done(\"hello\")\nvalue = unwrap!(res) # => \"hello\"\n\nres = Err.fail(\"Oops\")\nvalue = unwrap!(res) # => raise Exception.new \"Oops\"\n\nfoo = \"bar\"\nvalue2 = unwrap!(foo) # => \"bar\"\n```","summary":"<p>Try to unwrap <em>value</em> (like <code>Result#unwrap</code>).</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":null,"def":{"name":"unwrap!","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  \n{{ value }}\n.responds_to?(:unwrap) ? \n{{ value }}\n.unwrap : \n{{ value }}\n\n\n"}}],"types":[{"html_id":"result/Err","path":"Err.html","kind":"struct","full_name":"Err(T)","name":"Err","abstract":true,"superclass":{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},"ancestors":[{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"result/ErrType/Conflict","kind":"struct","full_name":"ErrType::Conflict(T)","name":"Conflict"},{"html_id":"result/ErrType/Fail","kind":"struct","full_name":"ErrType::Fail(T)","name":"Fail"},{"html_id":"result/ErrType/Input","kind":"struct","full_name":"ErrType::Input(T)","name":"Input"},{"html_id":"result/ErrType/NotAllowed","kind":"struct","full_name":"ErrType::NotAllowed(T)","name":"NotAllowed"},{"html_id":"result/ErrType/NotFound","kind":"struct","full_name":"ErrType::NotFound(T)","name":"NotFound"},{"html_id":"result/ErrType/Timeout","kind":"struct","full_name":"ErrType::Timeout(T)","name":"Timeout"}],"including_types":[],"namespace":null,"doc":"`Result` error .","summary":"<p><code><a href=\"Result.html\">Result</a></code> error .</p>","class_methods":[{"id":"[](exception):Err::Fail-class-method","html_id":"[](exception):Err::Fail-class-method","name":"[]","doc":"Syntax sugar for `Err.fail(exception)`.\n*exception* must be an `Exception` or a `String`.","summary":"<p>Syntax sugar for <code><a href=\"Err.html#fail(exception):ErrType::Fail-class-method\">Err.fail(exception)</a></code>.</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : Err::Fail","source_link":null,"def":{"name":"[]","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Err::Fail","visibility":"Public","body":"self.fail(exception)"}},{"id":"conflict(exception):ErrType::Conflict-class-method","html_id":"conflict(exception):ErrType::Conflict-class-method","name":"conflict","doc":"Creates new `Err::Conflict` instance (alias of `ErrType::Conflict`).\n\n```\nerr = Err.conflict(exception) # => Err::Conflict\n```","summary":"<p>Creates new <code><a href=\"Err/Conflict.html\">Err::Conflict</a></code> instance (alias of <code><a href=\"ErrType/Conflict.html\">ErrType::Conflict</a></code>).</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : ErrType::Conflict","source_link":null,"def":{"name":"conflict","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ErrType::Conflict","visibility":"Public","body":"Conflict.new(exception)"}},{"id":"fail(exception):ErrType::Fail-class-method","html_id":"fail(exception):ErrType::Fail-class-method","name":"fail","doc":"Creates new `Err::Fail` instance (alias of `ErrType::Fail`).\n\n```\nerr = Err.fail(exception) # => Err::Fail\n```","summary":"<p>Creates new <code><a href=\"Err/Fail.html\">Err::Fail</a></code> instance (alias of <code><a href=\"ErrType/Fail.html\">ErrType::Fail</a></code>).</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : ErrType::Fail","source_link":null,"def":{"name":"fail","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ErrType::Fail","visibility":"Public","body":"Fail.new(exception)"}},{"id":"input(exception):ErrType::Input-class-method","html_id":"input(exception):ErrType::Input-class-method","name":"input","doc":"Creates new `Err::Input` instance (alias of `ErrType::Input`).\n\n```\nerr = Err.input(exception) # => Err::Input\n```","summary":"<p>Creates new <code><a href=\"Err/Input.html\">Err::Input</a></code> instance (alias of <code><a href=\"ErrType/Input.html\">ErrType::Input</a></code>).</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : ErrType::Input","source_link":null,"def":{"name":"input","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ErrType::Input","visibility":"Public","body":"Input.new(exception)"}},{"id":"not_allowed(exception):ErrType::NotAllowed-class-method","html_id":"not_allowed(exception):ErrType::NotAllowed-class-method","name":"not_allowed","doc":"Creates new `Err::NotAllowed` instance (alias of `ErrType::NotAllowed`).\n\n```\nerr = Err.not_allowed(exception) # => Err::NotAllowed\n```","summary":"<p>Creates new <code><a href=\"Err/NotAllowed.html\">Err::NotAllowed</a></code> instance (alias of <code><a href=\"ErrType/NotAllowed.html\">ErrType::NotAllowed</a></code>).</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : ErrType::NotAllowed","source_link":null,"def":{"name":"not_allowed","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ErrType::NotAllowed","visibility":"Public","body":"NotAllowed.new(exception)"}},{"id":"not_found(exception):ErrType::NotFound-class-method","html_id":"not_found(exception):ErrType::NotFound-class-method","name":"not_found","doc":"Creates new `Err::NotFound` instance (alias of `ErrType::NotFound`).\n\n```\nerr = Err.not_found(exception) # => Err::NotFound\n```","summary":"<p>Creates new <code><a href=\"Err/NotFound.html\">Err::NotFound</a></code> instance (alias of <code><a href=\"ErrType/NotFound.html\">ErrType::NotFound</a></code>).</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : ErrType::NotFound","source_link":null,"def":{"name":"not_found","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ErrType::NotFound","visibility":"Public","body":"NotFound.new(exception)"}},{"id":"timeout(exception):ErrType::Timeout-class-method","html_id":"timeout(exception):ErrType::Timeout-class-method","name":"timeout","doc":"Creates new `Err::Timeout` instance (alias of `ErrType::Timeout`).\n\n```\nerr = Err.timeout(exception) # => Err::Timeout\n```","summary":"<p>Creates new <code><a href=\"Err/Timeout.html\">Err::Timeout</a></code> instance (alias of <code><a href=\"ErrType/Timeout.html\">ErrType::Timeout</a></code>).</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : ErrType::Timeout","source_link":null,"def":{"name":"timeout","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ErrType::Timeout","visibility":"Public","body":"Timeout.new(exception)"}},{"id":"type:Symbol-class-method","html_id":"type:Symbol-class-method","name":"type","doc":"`Result` type as a `Symbol`.\n\n```\nErr.type # => :err\n```","summary":"<p><code><a href=\"Result.html\">Result</a></code> type as a <code>Symbol</code>.</p>","abstract":false,"args":[],"args_string":" : Symbol","source_link":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":":err"}}],"constructors":[],"instance_methods":[{"id":"type:Symbol-instance-method","html_id":"type:Symbol-instance-method","name":"type","doc":"`Result` type as a `Symbol`.\n\n```\nres.type # => :err\n```","summary":"<p><code><a href=\"Result.html\">Result</a></code> type as a <code>Symbol</code>.</p>","abstract":false,"args":[],"args_string":" : Symbol","source_link":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":":err"}},{"id":"unwrap-instance-method","html_id":"unwrap-instance-method","name":"unwrap","doc":"Unwrap the result `value` (like _Result::unwrap_ in Rust).\nThis method raises *exception*.","summary":"<p>Unwrap the result <code><a href=\"Err.html#value-instance-method\">#value</a></code> (like <em>Result::unwrap</em> in Rust).</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"unwrap","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(@exception)"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":"Returns the result value.\nReturns a `Exception` or a `String`","summary":"<p>Returns the result value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@exception"}}],"macros":[],"types":[{"html_id":"result/Err/Conflict","path":"Err/Conflict.html","kind":"alias","full_name":"Err::Conflict","name":"Conflict","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":true,"aliased":"ErrType::Conflict(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/Err","kind":"struct","full_name":"Err(T)","name":"Err"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/Err/Fail","path":"Err/Fail.html","kind":"alias","full_name":"Err::Fail","name":"Fail","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":true,"aliased":"ErrType::Fail(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/Err","kind":"struct","full_name":"Err(T)","name":"Err"},"doc":"Defines all Err `Result` creators.","summary":"<p>Defines all Err <code><a href=\"../Result.html\">Result</a></code> creators.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/Err/Input","path":"Err/Input.html","kind":"alias","full_name":"Err::Input","name":"Input","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":true,"aliased":"ErrType::Input(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/Err","kind":"struct","full_name":"Err(T)","name":"Err"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/Err/NotAllowed","path":"Err/NotAllowed.html","kind":"alias","full_name":"Err::NotAllowed","name":"NotAllowed","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":true,"aliased":"ErrType::NotAllowed(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/Err","kind":"struct","full_name":"Err(T)","name":"Err"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/Err/NotFound","path":"Err/NotFound.html","kind":"alias","full_name":"Err::NotFound","name":"NotFound","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":true,"aliased":"ErrType::NotFound(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/Err","kind":"struct","full_name":"Err(T)","name":"Err"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/Err/Timeout","path":"Err/Timeout.html","kind":"alias","full_name":"Err::Timeout","name":"Timeout","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":true,"aliased":"ErrType::Timeout(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/Err","kind":"struct","full_name":"Err(T)","name":"Err"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"result/ErrType","path":"ErrType.html","kind":"module","full_name":"ErrType","name":"ErrType","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"All `Err` types.","summary":"<p>All <code><a href=\"Err.html\">Err</a></code> types.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"result/ErrType/Conflict","path":"ErrType/Conflict.html","kind":"struct","full_name":"ErrType::Conflict(T)","name":"Conflict","abstract":false,"superclass":{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},"ancestors":[{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/ErrType","kind":"module","full_name":"ErrType","name":"ErrType"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(exception:T)-class-method","html_id":"new(exception:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"args_string":"(exception : T)","source_link":null,"def":{"name":"new","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Conflict(T).allocate\n_.initialize(exception)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/ErrType/Fail","path":"ErrType/Fail.html","kind":"struct","full_name":"ErrType::Fail(T)","name":"Fail","abstract":false,"superclass":{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},"ancestors":[{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/ErrType","kind":"module","full_name":"ErrType","name":"ErrType"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(exception:T)-class-method","html_id":"new(exception:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"args_string":"(exception : T)","source_link":null,"def":{"name":"new","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Fail(T).allocate\n_.initialize(exception)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/ErrType/Input","path":"ErrType/Input.html","kind":"struct","full_name":"ErrType::Input(T)","name":"Input","abstract":false,"superclass":{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},"ancestors":[{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/ErrType","kind":"module","full_name":"ErrType","name":"ErrType"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(exception:T)-class-method","html_id":"new(exception:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"args_string":"(exception : T)","source_link":null,"def":{"name":"new","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Input(T).allocate\n_.initialize(exception)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/ErrType/NotAllowed","path":"ErrType/NotAllowed.html","kind":"struct","full_name":"ErrType::NotAllowed(T)","name":"NotAllowed","abstract":false,"superclass":{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},"ancestors":[{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/ErrType","kind":"module","full_name":"ErrType","name":"ErrType"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(exception:T)-class-method","html_id":"new(exception:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"args_string":"(exception : T)","source_link":null,"def":{"name":"new","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = NotAllowed(T).allocate\n_.initialize(exception)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/ErrType/NotFound","path":"ErrType/NotFound.html","kind":"struct","full_name":"ErrType::NotFound(T)","name":"NotFound","abstract":false,"superclass":{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},"ancestors":[{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/ErrType","kind":"module","full_name":"ErrType","name":"ErrType"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(exception:T)-class-method","html_id":"new(exception:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"args_string":"(exception : T)","source_link":null,"def":{"name":"new","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = NotFound(T).allocate\n_.initialize(exception)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/ErrType/Timeout","path":"ErrType/Timeout.html","kind":"struct","full_name":"ErrType::Timeout(T)","name":"Timeout","abstract":false,"superclass":{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},"ancestors":[{"html_id":"result/Err","kind":"struct","full_name":"Err","name":"Err"},{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/ErrType","kind":"module","full_name":"ErrType","name":"ErrType"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(exception:T)-class-method","html_id":"new(exception:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"args_string":"(exception : T)","source_link":null,"def":{"name":"new","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Timeout(T).allocate\n_.initialize(exception)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"result/Ok","path":"Ok.html","kind":"struct","full_name":"Ok(T)","name":"Ok","abstract":true,"superclass":{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},"ancestors":[{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"result/OkType/Created","kind":"struct","full_name":"OkType::Created(T)","name":"Created"},{"html_id":"result/OkType/Destroyed","kind":"struct","full_name":"OkType::Destroyed(T)","name":"Destroyed"},{"html_id":"result/OkType/Done","kind":"struct","full_name":"OkType::Done(T)","name":"Done"},{"html_id":"result/OkType/Pending","kind":"struct","full_name":"OkType::Pending(T)","name":"Pending"},{"html_id":"result/OkType/Updated","kind":"struct","full_name":"OkType::Updated(T)","name":"Updated"}],"including_types":[],"namespace":null,"doc":"`Result` Ok.","summary":"<p><code><a href=\"Result.html\">Result</a></code> Ok.</p>","class_methods":[{"id":"[](value):OkType::Done-class-method","html_id":"[](value):OkType::Done-class-method","name":"[]","doc":"Syntax sugar for `Ok.done(value)`.","summary":"<p>Syntax sugar for <code><a href=\"Ok.html#done(value):OkType::Done-class-method\">Ok.done(value)</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : OkType::Done","source_link":null,"def":{"name":"[]","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"OkType::Done","visibility":"Public","body":"self.done(value)"}},{"id":"created(value):OkType::Created-class-method","html_id":"created(value):OkType::Created-class-method","name":"created","doc":"Creates new `Ok::Created` instance (alias of `OkType::Created`).\n\n```\nres = Ok.created(value) # => Ok::Created\n\npp res.unwrap\n# or\npp res.value\n```","summary":"<p>Creates new <code><a href=\"Ok/Created.html\">Ok::Created</a></code> instance (alias of <code><a href=\"OkType/Created.html\">OkType::Created</a></code>).</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : OkType::Created","source_link":null,"def":{"name":"created","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"OkType::Created","visibility":"Public","body":"Created.new(value)"}},{"id":"destroyed(value):OkType::Destroyed-class-method","html_id":"destroyed(value):OkType::Destroyed-class-method","name":"destroyed","doc":"Creates new `Ok::Destroyed` instance (alias of `OkType::Destroyed`).\n\n```\nres = Ok.destroyed(value) # => Ok::Destroyed\n\npp res.unwrap\n# or\npp res.value\n```","summary":"<p>Creates new <code><a href=\"Ok/Destroyed.html\">Ok::Destroyed</a></code> instance (alias of <code><a href=\"OkType/Destroyed.html\">OkType::Destroyed</a></code>).</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : OkType::Destroyed","source_link":null,"def":{"name":"destroyed","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"OkType::Destroyed","visibility":"Public","body":"Destroyed.new(value)"}},{"id":"done(value):OkType::Done-class-method","html_id":"done(value):OkType::Done-class-method","name":"done","doc":"Creates new `Ok::Done` instance (alias of `OkType::Done`).\n\n```\nres = Ok.done(value) # => Ok::Done\n\npp res.unwrap\n# or\npp res.value\n```","summary":"<p>Creates new <code><a href=\"Ok/Done.html\">Ok::Done</a></code> instance (alias of <code><a href=\"OkType/Done.html\">OkType::Done</a></code>).</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : OkType::Done","source_link":null,"def":{"name":"done","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"OkType::Done","visibility":"Public","body":"Done.new(value)"}},{"id":"pending(value):OkType::Pending-class-method","html_id":"pending(value):OkType::Pending-class-method","name":"pending","doc":"Creates new `Ok::Pending` instance (alias of `OkType::Pending`).\n\n```\nres = Ok.pending(value) # => Ok::Pending\n\npp res.unwrap\n# or\npp res.value\n```","summary":"<p>Creates new <code><a href=\"Ok/Pending.html\">Ok::Pending</a></code> instance (alias of <code><a href=\"OkType/Pending.html\">OkType::Pending</a></code>).</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : OkType::Pending","source_link":null,"def":{"name":"pending","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"OkType::Pending","visibility":"Public","body":"Pending.new(value)"}},{"id":"type:Symbol-class-method","html_id":"type:Symbol-class-method","name":"type","doc":"`Result` type as a `Symbol`.\n\n```\nOk.type # => :ok\n```","summary":"<p><code><a href=\"Result.html\">Result</a></code> type as a <code>Symbol</code>.</p>","abstract":false,"args":[],"args_string":" : Symbol","source_link":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":":ok"}},{"id":"updated(value):OkType::Updated-class-method","html_id":"updated(value):OkType::Updated-class-method","name":"updated","doc":"Creates new `Ok::Updated` instance (alias of `OkType::Updated`).\n\n```\nres = Ok.updated(value) # => Ok::Updated\n\npp res.unwrap\n# or\npp res.value\n```","summary":"<p>Creates new <code><a href=\"Ok/Updated.html\">Ok::Updated</a></code> instance (alias of <code><a href=\"OkType/Updated.html\">OkType::Updated</a></code>).</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : OkType::Updated","source_link":null,"def":{"name":"updated","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"OkType::Updated","visibility":"Public","body":"Updated.new(value)"}}],"constructors":[],"instance_methods":[{"id":"type:Symbol-instance-method","html_id":"type:Symbol-instance-method","name":"type","doc":"`Result` type as a `Symbol`.\n\n```\nres.type # => :ok\n```","summary":"<p><code><a href=\"Result.html\">Result</a></code> type as a <code>Symbol</code>.</p>","abstract":false,"args":[],"args_string":" : Symbol","source_link":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":":ok"}},{"id":"unwrap-instance-method","html_id":"unwrap-instance-method","name":"unwrap","doc":"Unwrap the result `value` (like _Result::unwrap_ in Rust).","summary":"<p>Unwrap the result <code><a href=\"Ok.html#value-instance-method\">#value</a></code> (like <em>Result::unwrap</em> in Rust).</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"unwrap","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":"Returns the result value.","summary":"<p>Returns the result value.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}}],"macros":[],"types":[{"html_id":"result/Ok/Created","path":"Ok/Created.html","kind":"alias","full_name":"Ok::Created","name":"Created","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":true,"aliased":"OkType::Created(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/Ok","kind":"struct","full_name":"Ok(T)","name":"Ok"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/Ok/Destroyed","path":"Ok/Destroyed.html","kind":"alias","full_name":"Ok::Destroyed","name":"Destroyed","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":true,"aliased":"OkType::Destroyed(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/Ok","kind":"struct","full_name":"Ok(T)","name":"Ok"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/Ok/Done","path":"Ok/Done.html","kind":"alias","full_name":"Ok::Done","name":"Done","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":true,"aliased":"OkType::Done(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/Ok","kind":"struct","full_name":"Ok(T)","name":"Ok"},"doc":"Defines all Ok `Result` creators.","summary":"<p>Defines all Ok <code><a href=\"../Result.html\">Result</a></code> creators.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/Ok/Pending","path":"Ok/Pending.html","kind":"alias","full_name":"Ok::Pending","name":"Pending","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":true,"aliased":"OkType::Pending(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/Ok","kind":"struct","full_name":"Ok(T)","name":"Ok"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/Ok/Updated","path":"Ok/Updated.html","kind":"alias","full_name":"Ok::Updated","name":"Updated","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":true,"aliased":"OkType::Updated(T)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/Ok","kind":"struct","full_name":"Ok(T)","name":"Ok"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"result/OkType","path":"OkType.html","kind":"module","full_name":"OkType","name":"OkType","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"All `Ok` types.","summary":"<p>All <code><a href=\"Ok.html\">Ok</a></code> types.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"result/OkType/Created","path":"OkType/Created.html","kind":"struct","full_name":"OkType::Created(T)","name":"Created","abstract":false,"superclass":{"html_id":"result/Ok","kind":"struct","full_name":"Ok","name":"Ok"},"ancestors":[{"html_id":"result/Ok","kind":"struct","full_name":"Ok","name":"Ok"},{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/OkType","kind":"module","full_name":"OkType","name":"OkType"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(value:T)-class-method","html_id":"new(value:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T)","source_link":null,"def":{"name":"new","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Created(T).allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/OkType/Destroyed","path":"OkType/Destroyed.html","kind":"struct","full_name":"OkType::Destroyed(T)","name":"Destroyed","abstract":false,"superclass":{"html_id":"result/Ok","kind":"struct","full_name":"Ok","name":"Ok"},"ancestors":[{"html_id":"result/Ok","kind":"struct","full_name":"Ok","name":"Ok"},{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/OkType","kind":"module","full_name":"OkType","name":"OkType"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(value:T)-class-method","html_id":"new(value:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T)","source_link":null,"def":{"name":"new","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Destroyed(T).allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/OkType/Done","path":"OkType/Done.html","kind":"struct","full_name":"OkType::Done(T)","name":"Done","abstract":false,"superclass":{"html_id":"result/Ok","kind":"struct","full_name":"Ok","name":"Ok"},"ancestors":[{"html_id":"result/Ok","kind":"struct","full_name":"Ok","name":"Ok"},{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/OkType","kind":"module","full_name":"OkType","name":"OkType"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(value:T)-class-method","html_id":"new(value:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T)","source_link":null,"def":{"name":"new","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Done(T).allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/OkType/Pending","path":"OkType/Pending.html","kind":"struct","full_name":"OkType::Pending(T)","name":"Pending","abstract":false,"superclass":{"html_id":"result/Ok","kind":"struct","full_name":"Ok","name":"Ok"},"ancestors":[{"html_id":"result/Ok","kind":"struct","full_name":"Ok","name":"Ok"},{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/OkType","kind":"module","full_name":"OkType","name":"OkType"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(value:T)-class-method","html_id":"new(value:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T)","source_link":null,"def":{"name":"new","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Pending(T).allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"result/OkType/Updated","path":"OkType/Updated.html","kind":"struct","full_name":"OkType::Updated(T)","name":"Updated","abstract":false,"superclass":{"html_id":"result/Ok","kind":"struct","full_name":"Ok","name":"Ok"},"ancestors":[{"html_id":"result/Ok","kind":"struct","full_name":"Ok","name":"Ok"},{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"result/OkType","kind":"module","full_name":"OkType","name":"OkType"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(value:T)-class-method","html_id":"new(value:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T)","source_link":null,"def":{"name":"new","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Updated(T).allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"result/Result","path":"Result.html","kind":"struct","full_name":"Result(T)","name":"Result","abstract":true,"superclass":{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"result/Err","kind":"struct","full_name":"Err(T)","name":"Err"},{"html_id":"result/Ok","kind":"struct","full_name":"Ok(T)","name":"Ok"}],"including_types":[],"namespace":null,"doc":"Wrap a value into a `Result` (like in Rust).","summary":"<p>Wrap a value into a <code><a href=\"Result.html\">Result</a></code> (like in Rust).</p>","class_methods":[{"id":"err?:Bool-class-method","html_id":"err?:Bool-class-method","name":"err?","doc":"Returns `true` if current `Result` class is `Err`, `false` otherwise.","summary":"<p>Returns <code>true</code> if current <code><a href=\"Result.html\">Result</a></code> class is <code><a href=\"Err.html\">Err</a></code>, <code>false</code> otherwise.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"err?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.type === (:err)"}},{"id":"ok?:Bool-class-method","html_id":"ok?:Bool-class-method","name":"ok?","doc":"Returns `true` if current `Result` class is `Ok`, `false` otherwise.","summary":"<p>Returns <code>true</code> if current <code><a href=\"Result.html\">Result</a></code> class is <code><a href=\"Ok.html\">Ok</a></code>, <code>false</code> otherwise.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"ok?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.type === (:ok)"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"err?:Bool-instance-method","html_id":"err?:Bool-instance-method","name":"err?","doc":"Returns `true` if current `Result` instance is `Err`, `false` otherwise.","summary":"<p>Returns <code>true</code> if current <code><a href=\"Result.html\">Result</a></code> instance is <code><a href=\"Err.html\">Err</a></code>, <code>false</code> otherwise.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"err?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"type === (:err)"}},{"id":"ok?:Bool-instance-method","html_id":"ok?:Bool-instance-method","name":"ok?","doc":"Returns `true` if current `Result` instance is `Ok`, `false` otherwise.","summary":"<p>Returns <code>true</code> if current <code><a href=\"Result.html\">Result</a></code> instance is <code><a href=\"Ok.html\">Ok</a></code>, <code>false</code> otherwise.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"ok?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"type === (:ok)"}},{"id":"type-instance-method","html_id":"type-instance-method","name":"type","doc":"`Result` type as a `Symbol` (*:ok* or *:err*).","summary":"<p><code><a href=\"Result.html\">Result</a></code> type as a <code>Symbol</code> (<em>:ok</em> or <em>:err</em>).</p>","abstract":true,"args":[],"args_string":"","source_link":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"unwrap-instance-method","html_id":"unwrap-instance-method","name":"unwrap","doc":"Unwrap the result `value` (like _Result::unwrap_ in Rust).","summary":"<p>Unwrap the result <code><a href=\"Result.html#value-instance-method\">#value</a></code> (like <em>Result::unwrap</em> in Rust).</p>","abstract":true,"args":[],"args_string":"","source_link":null,"def":{"name":"unwrap","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":"Returns the result value.","summary":"<p>Returns the result value.</p>","abstract":true,"args":[],"args_string":"","source_link":null,"def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]}]}})