crystal_doc_search_index_callback({"repository_name":"result","body":"# Result\n\n[![Build Status](https://travis-ci.com/Nicolab/crystal-result.svg?branch=master)](https://travis-ci.com/Nicolab/crystal-result) [![GitHub release](https://img.shields.io/github/release/Nicolab/crystal-result.svg)](https://github.com/Nicolab/crystal-result/releases) [![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://nicolab.github.io/crystal-result/)\n\n∠(・.-)―〉 →◎ `Result` adds _Monadic Error Handling_ capabilities to [Crystal lang](https://crystal-lang.org), inspired by `Result` in _Rust_ lang, Monad and the _Elixir_ lang approach (state return).\n\nAdapted to be productive in Crystal and [Domain-Driven Design (DDD)](https://en.wikipedia.org/wiki/Domain-driven_design).\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\n   dependencies:\n     result:\n       github: nicolab/crystal-result\n       version: ~> 2.0.0 # Check the latest version!\n```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"result\"\nrequire \"result/utils\"\n\n# With a basic *value*\ndef something(value : Number) : Result\n  # Wrap value into a `Result` instance (struct: `Ok` or `Err`).\n  # If an error occurred, here *something* method returns an `Err` instance.\n  res = result!(value)\n\n  # Executed only if `result!` (above) has returned an `Ok` instance,\n  pp \"does something\"\n  pp res.unwrap # => Number\n\n  res\nend\n\n# With a `Result` instance\ndef something(res : Result) : Result\n  # Try to unwrap original value.\n  # If result is an error, here *something* method returns this `Err` instance.\n  data = try!(res)\n\n  # Executed if `try!` (above) has returned the original value.\n  pp \"does something\"\n\n  # Original value\n  pp data\n\n  # Wrap data into a `Result` struct:\n\n  # Returns success\n  # `Ok` / `Ok.status # => :done`\n  Ok.done data\n\n  # Or returns an error\n  # `Err` / `Err.status # => :fail`\n  Err.fail \"Oops!\"\nend\n\n# Try to unwrap a *Result* (like `Result#unwrap`) or forward the value if it is not a `Result`.\nres = Ok.done(\"hello\") # or `Ok.new(\"hello\")`\nvalue = unwrap!(res) # => \"hello\"\n\nres = Err.fail(\"Oops\") # or `Err.new(\"Oops\")`\nvalue = unwrap!(res) # => raise Exception.new \"Oops\"\n\nfoo = \"bar\"\nvalue2 = unwrap!(foo) # => \"bar\"\n```\n\nTo go further, `Result` works wonderfully with [fuzzineer/match-crystal](https://github.com/scatterfish/match-crystal).\n\n```crystal\nrequire \"result\"\nrequire \"result/utils\"\nrequire \"match-crystal\"\n\nres = something()\n\nmessage = match res.status, {\n  :created   => \"Created with success\",\n  :destroyed => \"Destroyed with success\",\n  :pending   => \"Pending task\",\n  :input     => \"Bad argument\",\n  :fail      => \"Failed\",\n  _          => \"anything else!\",\n}\n\nputs message\n\n# other example\n\nmessage = match res, {\n  Ok(String)              => \"Ok is a good string\",\n  res.status? :created    => \"Created with success\",\n  Ok                      => \"It's ok\",\n  Err(ArgumentError)      => \"Bad argument\",\n  res.status? :not_found  => \"Not found\",\n  Err                     => ->{\n    puts \"Block is supported using Proc syntax\"\n    \"Error occurred\"\n  },\n}\n\nputs message\n```\n\nExample with a `case`:\n\n```crystal\nmessage = case res\n  when .status? :created\n    \"Created with success\"\n  when .status? :destroyed\n    \"Destroyed with success\"\n  when .status? :pending\n    \"Pending task\"\n  when .status? :input\n    \"Bad argument\"\n  when .status? :not_found\n    \"Not found\"\n  when .status? :fail\n    \"Failed\"\n  when Ok\n    \"Another success\"\n  when Err\n    \"Another error\"\n  else\n    \"Anything else!\"\n  end\n\nputs message\n```\n\nWorks well with a controller.\n\n## Development\n\n```sh\ncrystal spec\ncrystal tool format\n```\n\n## Contributing\n\n1. Fork it (https://github.com/Nicolab/crystal-result/fork)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## LICENSE\n\n[MIT](https://github.com/Nicolab/crystal-result/blob/master/LICENSE) (c) 2020, Nicolas Talle.\n\n## Author\n\n| [![Nicolas Tallefourtane - Nicolab.net](https://www.gravatar.com/avatar/d7dd0f4769f3aa48a3ecb308f0b457fc?s=64)](https://github.com/sponsors/Nicolab) |\n|---|\n| [Nicolas Talle](https://github.com/sponsors/Nicolab) |\n| [![Make a donation via Paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=PGRH4ZXP36GUC) |\n","program":{"html_id":"result/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"result","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"result!(value,ok=:done,err=:fail)-macro","html_id":"result!(value,ok=:done,err=:fail)-macro","name":"result!","doc":"Takes a *value* and make a `Result`.\n\n* `Ok` (*ok*) instance if *value* does not raise an `Exception`.\n* or force the caller to return `Err` (*err*) if an `Exception` occurred\n  (in this case, the rest of the code isn't executed).\n\n```\n# With a basic *value*\ndef something(value : Number) : Result\n  # Wrap value into a `Result` instance (struct: `Ok` or `Err`).\n  # If an error occurred, here *something* method returns an `Err` instance.\n  res = result!(value)\n\n  # Executed only if `result!` (above) has returned an `Ok` instance,\n  pp \"does something\"\n  pp res.unwrap # => Number\n\n  res\nend\n```","summary":"<p>Takes a <em>value</em> and make a <code><a href=\"Result.html\">Result</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"ok","doc":null,"default_value":":done","external_name":"ok","restriction":""},{"name":"err","doc":null,"default_value":":fail","external_name":"err","restriction":""}],"args_string":"(value, ok = <span class=\"n\">:done</span>, err = <span class=\"n\">:fail</span>)","location":{"filename":"src/utils.cr","line_number":84,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/utils.cr#L84"},"def":{"name":"result!","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"ok","doc":null,"default_value":":done","external_name":"ok","restriction":""},{"name":"err","doc":null,"default_value":":fail","external_name":"err","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  begin\n    Ok.new \n{{ ok }}\n, \n{{ value }}\n\n  rescue \nexception\n    return Err.new \n{{ err }}\n, \nexception\n  \nend\n\n"}},{"id":"try!(result)-macro","html_id":"try!(result)-macro","name":"try!","doc":"Get the `Result` value (unwrapped) or force the caller to return `Err`\n(if `Err`, the rest of the code isn't executed).\n\n```\n# With a `Result` instance\ndef something(res : Result) : Result\n  # Try to unwrap original value.\n  # If result is an error, here *something* method returns this `Err` instance.\n  data = try!(res)\n\n  # Executed if `try!` (above) has returned the original value.\n  pp \"does something\"\n\n  # Original value\n  pp data\n\n  # Wrap data into a `Result` struct:\n\n  # Returns success\n  # `Ok` / `Ok.status # => :done`\n  Ok.done data\n\n  # Or returns an error\n  # `Err` / `Err.status # => :fail`\n  Err.fail \"Oops!\"\nend\n```","summary":"<p>Get the <code><a href=\"Result.html\">Result</a></code> value (unwrapped) or force the caller to return <code><a href=\"Err.html\">Err</a></code> (if <code><a href=\"Err.html\">Err</a></code>, the rest of the code isn't executed).</p>","abstract":false,"args":[{"name":"result","doc":null,"default_value":"","external_name":"result","restriction":""}],"args_string":"(result)","location":{"filename":"src/utils.cr","line_number":35,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/utils.cr#L35"},"def":{"name":"try!","args":[{"name":"result","doc":null,"default_value":"","external_name":"result","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  \n%res\n = \n{{ result }}\n\n\n  if \n%res\n.ok?\n    \n%res\n.unwrap\n  \nelse\n    \n# returns error\n\n    return \n%res\n\n  \nend\n\n"}},{"id":"unwrap!(value)-macro","html_id":"unwrap!(value)-macro","name":"unwrap!","doc":"Try to unwrap *value* (like `Result#unwrap`).\nIf value is not a `Result` (`Ok` or `Err`), *value* is simply forwarded.\n> NOTE: To proceed, this macro checks if *value* `responds_to` `unwrap` method.\n\n```\nres = Ok.done(\"hello\") # or Ok.new(\"hello\")\nvalue = unwrap!(res)   # => \"hello\"\n\nres = Err.fail(\"Oops\")\nvalue = unwrap!(res) # => raise Exception.new \"Oops\"\n\nfoo = \"bar\"\nvalue2 = unwrap!(foo) # => \"bar\"\n```","summary":"<p>Try to unwrap <em>value</em> (like <code>Result#unwrap</code>).</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","location":{"filename":"src/utils.cr","line_number":60,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/utils.cr#L60"},"def":{"name":"unwrap!","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  \n{{ value }}\n.responds_to?(:unwrap) ? \n{{ value }}\n.unwrap : \n{{ value }}\n\n\n"}}],"types":[{"html_id":"result/Err","path":"Err.html","kind":"struct","full_name":"Err(T)","name":"Err","abstract":false,"superclass":{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},"ancestors":[{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"}],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Result` error .","summary":"<p><code><a href=\"Result.html\">Result</a></code> error .</p>","class_methods":[{"id":"type:Symbol-class-method","html_id":"type:Symbol-class-method","name":"type","doc":"`Result` type as a `Symbol`.\n\n```\nErr.type # => :err\n```","summary":"<p><code><a href=\"Result.html\">Result</a></code> type as a <code>Symbol</code>.</p>","abstract":false,"args":[],"args_string":" : Symbol","args_html":" : Symbol","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":":err"}}],"constructors":[{"id":"[](exception):Err-class-method","html_id":"[](exception):Err-class-method","name":"[]","doc":"Syntax sugar for `Err.fail(exception)`.\n*exception* must be an `Exception` or a `String`.","summary":"<p>Syntax sugar for <code><a href=\"Err.html#fail(exception):Err-class-method\">Err.fail(exception)</a></code>.</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : Err","args_html":"(exception) : <a href=\"Err.html\">Err</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"[]","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Err","visibility":"Public","body":"self.fail(exception)"}},{"id":"conflict(exception):Err-class-method","html_id":"conflict(exception):Err-class-method","name":"conflict","doc":"Creates a new `Err` instance with the status `conflict`.\nThis method is a shortcut for `Err.new conflict, exception`.\n\n```\nres = Err.conflict(exception)\nres.status # => :conflict\n\n# Raise\nres.unwrap\n\n# Or get the exception value\npp res.value\n```","summary":"<p>Creates a new <code><a href=\"Err.html\">Err</a></code> instance with the status <code><a href=\"Err.html#conflict(exception):Err-class-method\">.conflict</a></code>.</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : Err","args_html":"(exception) : <a href=\"Err.html\">Err</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"conflict","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Err","visibility":"Public","body":"Err.new(:conflict, exception)"}},{"id":"fail(exception):Err-class-method","html_id":"fail(exception):Err-class-method","name":"fail","doc":"Creates a new `Err` instance with the status `fail`.\nThis method is a shortcut for `Err.new fail, exception`.\n\n```\nres = Err.fail(exception)\nres.status # => :fail\n\n# Raise\nres.unwrap\n\n# Or get the exception value\npp res.value\n```","summary":"<p>Creates a new <code><a href=\"Err.html\">Err</a></code> instance with the status <code><a href=\"Err.html#fail(exception):Err-class-method\">.fail</a></code>.</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : Err","args_html":"(exception) : <a href=\"Err.html\">Err</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"fail","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Err","visibility":"Public","body":"Err.new(:fail, exception)"}},{"id":"input(exception):Err-class-method","html_id":"input(exception):Err-class-method","name":"input","doc":"Creates a new `Err` instance with the status `input`.\nThis method is a shortcut for `Err.new input, exception`.\n\n```\nres = Err.input(exception)\nres.status # => :input\n\n# Raise\nres.unwrap\n\n# Or get the exception value\npp res.value\n```","summary":"<p>Creates a new <code><a href=\"Err.html\">Err</a></code> instance with the status <code><a href=\"Err.html#input(exception):Err-class-method\">.input</a></code>.</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : Err","args_html":"(exception) : <a href=\"Err.html\">Err</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"input","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Err","visibility":"Public","body":"Err.new(:input, exception)"}},{"id":"new(status:Symbol,exception:T)-class-method","html_id":"new(status:Symbol,exception:T)-class-method","name":"new","doc":"Creates a new `Err` instance with a custom `status`.","summary":"<p>Creates a new <code><a href=\"Err.html\">Err</a></code> instance with a custom <code><a href=\"Err.html#status:Symbol-instance-method\">#status</a></code>.</p>","abstract":false,"args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Symbol"},{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"args_string":"(status : Symbol, exception : T)","args_html":"(status : Symbol, exception : T)","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"new","args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Symbol"},{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Err(T).allocate\n_.initialize(status, exception)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(exception:T)-class-method","html_id":"new(exception:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"args_string":"(exception : T)","args_html":"(exception : T)","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"new","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Err(T).allocate\n_.initialize(exception)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"not_allowed(exception):Err-class-method","html_id":"not_allowed(exception):Err-class-method","name":"not_allowed","doc":"Creates a new `Err` instance with the status `not_allowed`.\nThis method is a shortcut for `Err.new not_allowed, exception`.\n\n```\nres = Err.not_allowed(exception)\nres.status # => :not_allowed\n\n# Raise\nres.unwrap\n\n# Or get the exception value\npp res.value\n```","summary":"<p>Creates a new <code><a href=\"Err.html\">Err</a></code> instance with the status <code><a href=\"Err.html#not_allowed(exception):Err-class-method\">.not_allowed</a></code>.</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : Err","args_html":"(exception) : <a href=\"Err.html\">Err</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"not_allowed","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Err","visibility":"Public","body":"Err.new(:not_allowed, exception)"}},{"id":"not_found(exception):Err-class-method","html_id":"not_found(exception):Err-class-method","name":"not_found","doc":"Creates a new `Err` instance with the status `not_found`.\nThis method is a shortcut for `Err.new not_found, exception`.\n\n```\nres = Err.not_found(exception)\nres.status # => :not_found\n\n# Raise\nres.unwrap\n\n# Or get the exception value\npp res.value\n```","summary":"<p>Creates a new <code><a href=\"Err.html\">Err</a></code> instance with the status <code><a href=\"Err.html#not_found(exception):Err-class-method\">.not_found</a></code>.</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : Err","args_html":"(exception) : <a href=\"Err.html\">Err</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"not_found","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Err","visibility":"Public","body":"Err.new(:not_found, exception)"}},{"id":"timeout(exception):Err-class-method","html_id":"timeout(exception):Err-class-method","name":"timeout","doc":"Creates a new `Err` instance with the status `timeout`.\nThis method is a shortcut for `Err.new timeout, exception`.\n\n```\nres = Err.timeout(exception)\nres.status # => :timeout\n\n# Raise\nres.unwrap\n\n# Or get the exception value\npp res.value\n```","summary":"<p>Creates a new <code><a href=\"Err.html\">Err</a></code> instance with the status <code><a href=\"Err.html#timeout(exception):Err-class-method\">.timeout</a></code>.</p>","abstract":false,"args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"args_string":"(exception) : Err","args_html":"(exception) : <a href=\"Err.html\">Err</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"timeout","args":[{"name":"exception","doc":null,"default_value":"","external_name":"exception","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Err","visibility":"Public","body":"Err.new(:timeout, exception)"}}],"instance_methods":[{"id":"status:Symbol-instance-method","html_id":"status:Symbol-instance-method","name":"status","doc":"`Result` status as a `Symbol` (*:done* or *:fail*, etc).","summary":"<p><code><a href=\"Result.html\">Result</a></code> status as a <code>Symbol</code> (<em>:done</em> or <em>:fail</em>, etc).</p>","abstract":false,"args":[],"args_string":" : Symbol","args_html":" : Symbol","location":null,"def":{"name":"status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":"@status"}},{"id":"type:Symbol-instance-method","html_id":"type:Symbol-instance-method","name":"type","doc":"`Result` type as a `Symbol`.\n\n```\nres.type # => :err\n```","summary":"<p><code><a href=\"Result.html\">Result</a></code> type as a <code>Symbol</code>.</p>","abstract":false,"args":[],"args_string":" : Symbol","args_html":" : Symbol","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":":err"}},{"id":"unwrap-instance-method","html_id":"unwrap-instance-method","name":"unwrap","doc":"Unwrap the result `value` (like _Result::unwrap_ in Rust).\nThis method raises *exception*.","summary":"<p>Unwrap the result <code><a href=\"Err.html#value:T-instance-method\">#value</a></code> (like <em>Result::unwrap</em> in Rust).</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"unwrap","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(@exception)"}},{"id":"value:T-instance-method","html_id":"value:T-instance-method","name":"value","doc":"Returns the result value.\nReturns a `Exception` or a `String`","summary":"<p>Returns the result value.</p>","abstract":false,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"@exception"}}],"macros":[],"types":[]},{"html_id":"result/Ok","path":"Ok.html","kind":"struct","full_name":"Ok(T)","name":"Ok","abstract":false,"superclass":{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},"ancestors":[{"html_id":"result/Result","kind":"struct","full_name":"Result","name":"Result"},{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"}],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Result` Ok.","summary":"<p><code><a href=\"Result.html\">Result</a></code> Ok.</p>","class_methods":[{"id":"type:Symbol-class-method","html_id":"type:Symbol-class-method","name":"type","doc":"`Result` type as a `Symbol`.\n\n```\nOk.type # => :ok\n```","summary":"<p><code><a href=\"Result.html\">Result</a></code> type as a <code>Symbol</code>.</p>","abstract":false,"args":[],"args_string":" : Symbol","args_html":" : Symbol","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":":ok"}}],"constructors":[{"id":"[](value):Ok-class-method","html_id":"[](value):Ok-class-method","name":"[]","doc":"Syntax sugar for `Ok.done(value)`.","summary":"<p>Syntax sugar for <code><a href=\"Ok.html#done(value):Ok-class-method\">Ok.done(value)</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Ok","args_html":"(value) : <a href=\"Ok.html\">Ok</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"[]","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Ok","visibility":"Public","body":"self.done(value)"}},{"id":"created(value):Ok-class-method","html_id":"created(value):Ok-class-method","name":"created","doc":"Creates a new `Ok` instance with the status `created`.\nThis method is a shortcut for `Ok.new created, value`.\n\n```\nres = Ok.created(value)\nres.status # => :created\n\npp res.unwrap\n# or\npp res.value\n```","summary":"<p>Creates a new <code><a href=\"Ok.html\">Ok</a></code> instance with the status <code><a href=\"Ok.html#created(value):Ok-class-method\">.created</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Ok","args_html":"(value) : <a href=\"Ok.html\">Ok</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"created","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Ok","visibility":"Public","body":"Ok.new(:created, value)"}},{"id":"destroyed(value):Ok-class-method","html_id":"destroyed(value):Ok-class-method","name":"destroyed","doc":"Creates a new `Ok` instance with the status `destroyed`.\nThis method is a shortcut for `Ok.new destroyed, value`.\n\n```\nres = Ok.destroyed(value)\nres.status # => :destroyed\n\npp res.unwrap\n# or\npp res.value\n```","summary":"<p>Creates a new <code><a href=\"Ok.html\">Ok</a></code> instance with the status <code><a href=\"Ok.html#destroyed(value):Ok-class-method\">.destroyed</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Ok","args_html":"(value) : <a href=\"Ok.html\">Ok</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"destroyed","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Ok","visibility":"Public","body":"Ok.new(:destroyed, value)"}},{"id":"done(value):Ok-class-method","html_id":"done(value):Ok-class-method","name":"done","doc":"Creates a new `Ok` instance with the status `done`.\nThis method is a shortcut for `Ok.new done, value`.\n\n```\nres = Ok.done(value)\nres.status # => :done\n\npp res.unwrap\n# or\npp res.value\n```","summary":"<p>Creates a new <code><a href=\"Ok.html\">Ok</a></code> instance with the status <code><a href=\"Ok.html#done(value):Ok-class-method\">.done</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Ok","args_html":"(value) : <a href=\"Ok.html\">Ok</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"done","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Ok","visibility":"Public","body":"Ok.new(:done, value)"}},{"id":"new(status:Symbol,value:T)-class-method","html_id":"new(status:Symbol,value:T)-class-method","name":"new","doc":"Creates a new `Ok` instance with a custom `status`.","summary":"<p>Creates a new <code><a href=\"Ok.html\">Ok</a></code> instance with a custom <code><a href=\"Ok.html#status:Symbol-instance-method\">#status</a></code>.</p>","abstract":false,"args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Symbol"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(status : Symbol, value : T)","args_html":"(status : Symbol, value : T)","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"new","args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Symbol"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Ok(T).allocate\n_.initialize(status, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(value:T)-class-method","html_id":"new(value:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T)","args_html":"(value : T)","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"new","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Ok(T).allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"pending(value):Ok-class-method","html_id":"pending(value):Ok-class-method","name":"pending","doc":"Creates a new `Ok` instance with the status `pending`.\nThis method is a shortcut for `Ok.new pending, value`.\n\n```\nres = Ok.pending(value)\nres.status # => :pending\n\npp res.unwrap\n# or\npp res.value\n```","summary":"<p>Creates a new <code><a href=\"Ok.html\">Ok</a></code> instance with the status <code><a href=\"Ok.html#pending(value):Ok-class-method\">.pending</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Ok","args_html":"(value) : <a href=\"Ok.html\">Ok</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"pending","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Ok","visibility":"Public","body":"Ok.new(:pending, value)"}},{"id":"updated(value):Ok-class-method","html_id":"updated(value):Ok-class-method","name":"updated","doc":"Creates a new `Ok` instance with the status `updated`.\nThis method is a shortcut for `Ok.new updated, value`.\n\n```\nres = Ok.updated(value)\nres.status # => :updated\n\npp res.unwrap\n# or\npp res.value\n```","summary":"<p>Creates a new <code><a href=\"Ok.html\">Ok</a></code> instance with the status <code><a href=\"Ok.html#updated(value):Ok-class-method\">.updated</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Ok","args_html":"(value) : <a href=\"Ok.html\">Ok</a>","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"updated","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Ok","visibility":"Public","body":"Ok.new(:updated, value)"}}],"instance_methods":[{"id":"status:Symbol-instance-method","html_id":"status:Symbol-instance-method","name":"status","doc":"`Result` status as a `Symbol` (*:done* or *:fail*, etc).","summary":"<p><code><a href=\"Result.html\">Result</a></code> status as a <code>Symbol</code> (<em>:done</em> or <em>:fail</em>, etc).</p>","abstract":false,"args":[],"args_string":" : Symbol","args_html":" : Symbol","location":null,"def":{"name":"status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":"@status"}},{"id":"type:Symbol-instance-method","html_id":"type:Symbol-instance-method","name":"type","doc":"`Result` type as a `Symbol`.\n\n```\nres.type # => :ok\n```","summary":"<p><code><a href=\"Result.html\">Result</a></code> type as a <code>Symbol</code>.</p>","abstract":false,"args":[],"args_string":" : Symbol","args_html":" : Symbol","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":":ok"}},{"id":"unwrap-instance-method","html_id":"unwrap-instance-method","name":"unwrap","doc":"Unwrap the result `value` (like _Result::unwrap_ in Rust).","summary":"<p>Unwrap the result <code><a href=\"Ok.html#value:T-instance-method\">#value</a></code> (like <em>Result::unwrap</em> in Rust).</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"unwrap","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}},{"id":"value:T-instance-method","html_id":"value:T-instance-method","name":"value","doc":"Returns the result value.","summary":"<p>Returns the result value.</p>","abstract":false,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"@value"}}],"macros":[],"types":[]},{"html_id":"result/Result","path":"Result.html","kind":"struct","full_name":"Result(T)","name":"Result","abstract":true,"superclass":{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"result/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"result/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"result/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"}],"repository_name":"result","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"result/Err","kind":"struct","full_name":"Err(T)","name":"Err"},{"html_id":"result/Ok","kind":"struct","full_name":"Ok(T)","name":"Ok"}],"including_types":[],"namespace":null,"doc":"Wrap a value into a `Result` (like in Rust).","summary":"<p>Wrap a value into a <code><a href=\"Result.html\">Result</a></code> (like in Rust).</p>","class_methods":[{"id":"err?:Bool-class-method","html_id":"err?:Bool-class-method","name":"err?","doc":"Returns `true` if current `Result` class is `Err`, `false` otherwise.","summary":"<p>Returns <code>true</code> if current <code><a href=\"Result.html\">Result</a></code> class is <code><a href=\"Err.html\">Err</a></code>, <code>false</code> otherwise.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"err?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.type === (:err)"}},{"id":"ok?:Bool-class-method","html_id":"ok?:Bool-class-method","name":"ok?","doc":"Returns `true` if current `Result` class is `Ok`, `false` otherwise.","summary":"<p>Returns <code>true</code> if current <code><a href=\"Result.html\">Result</a></code> class is <code><a href=\"Ok.html\">Ok</a></code>, <code>false</code> otherwise.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"ok?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.type === (:ok)"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"err?:Bool-instance-method","html_id":"err?:Bool-instance-method","name":"err?","doc":"Returns `true` if current `Result` instance is `Err`, `false` otherwise.","summary":"<p>Returns <code>true</code> if current <code><a href=\"Result.html\">Result</a></code> instance is <code><a href=\"Err.html\">Err</a></code>, <code>false</code> otherwise.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"err?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"type === (:err)"}},{"id":"ok?:Bool-instance-method","html_id":"ok?:Bool-instance-method","name":"ok?","doc":"Returns `true` if current `Result` instance is `Ok`, `false` otherwise.","summary":"<p>Returns <code>true</code> if current <code><a href=\"Result.html\">Result</a></code> instance is <code><a href=\"Ok.html\">Ok</a></code>, <code>false</code> otherwise.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"ok?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"type === (:ok)"}},{"id":"state:Tuple(Symbol,Symbol,T)-instance-method","html_id":"state:Tuple(Symbol,Symbol,T)-instance-method","name":"state","doc":"Extract the `Result` state (`type`, `status` and `value`).\nInspired by the _Elixir_ lang approach, it's handy for the pattern matching.","summary":"<p>Extract the <code><a href=\"Result.html\">Result</a></code> state (<code><a href=\"Result.html#type:Symbol-instance-method\">#type</a></code>, <code><a href=\"Result.html#status:Symbol-instance-method\">#status</a></code> and <code><a href=\"Result.html#value:T-instance-method\">#value</a></code>).</p>","abstract":false,"args":[],"args_string":" : Tuple(Symbol, Symbol, T)","args_html":" : Tuple(Symbol, Symbol, T)","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(Symbol, Symbol, T)","visibility":"Public","body":"{type, status, value}"}},{"id":"status:Symbol-instance-method","html_id":"status:Symbol-instance-method","name":"status","doc":"`Result` status as a `Symbol` (*:done* or *:fail*, etc).","summary":"<p><code><a href=\"Result.html\">Result</a></code> status as a <code>Symbol</code> (<em>:done</em> or <em>:fail</em>, etc).</p>","abstract":true,"args":[],"args_string":" : Symbol","args_html":" : Symbol","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":""}},{"id":"status?(s:Symbol):Bool-instance-method","html_id":"status?(s:Symbol):Bool-instance-method","name":"status?","doc":"Checks a `status`.\n\n```\nres.status?(:done)\nres.status?(:fail)\n```","summary":"<p>Checks a <code><a href=\"Result.html#status:Symbol-instance-method\">#status</a></code>.</p>","abstract":false,"args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"Symbol"}],"args_string":"(s : Symbol) : Bool","args_html":"(s : Symbol) : Bool","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"status?","args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"status == s"}},{"id":"type:Symbol-instance-method","html_id":"type:Symbol-instance-method","name":"type","doc":"`Result` type as a `Symbol` (*:ok* or *:err*).","summary":"<p><code><a href=\"Result.html\">Result</a></code> type as a <code>Symbol</code> (<em>:ok</em> or <em>:err</em>).</p>","abstract":true,"args":[],"args_string":" : Symbol","args_html":" : Symbol","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":""}},{"id":"unwrap-instance-method","html_id":"unwrap-instance-method","name":"unwrap","doc":"Unwrap the result `value` (like _Result::unwrap_ in Rust).","summary":"<p>Unwrap the result <code><a href=\"Result.html#value:T-instance-method\">#value</a></code> (like <em>Result::unwrap</em> in Rust).</p>","abstract":true,"args":[],"args_string":"","args_html":"","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"unwrap","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"value:T-instance-method","html_id":"value:T-instance-method","name":"value","doc":"Returns the result value.","summary":"<p>Returns the result value.</p>","abstract":true,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/result.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-result/blob/e8316f56440774b22e715e21f4c350dff2f05b46/src/result.cr#L8"},"def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":""}}],"macros":[],"types":[]}]}})